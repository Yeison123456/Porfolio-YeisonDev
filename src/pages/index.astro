
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Portfolio - YeisonDev</title>
  <link href="/dist/output.css" rel="stylesheet">
  <style>
    body, html {
      margin: 0;
      padding: 0;
      overflow: hidden;
	  background-color: rgb(10, 10, 10);
    }
    canvas {
		display: block;
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw; /* Asegura que el canvas cubra todo el ancho */
		height: 100vh; /* Asegura que el canvas cubra toda la altura */
		z-index: -1; /* Envía el canvas al fondo */
		}
  </style>
</head>
<body class="bg-transparent">

	<header class="2xl:w-full 2xl:h-32 2xl:bg-transparent 2xl:flex 2xl:justify-end 2xl:items-center">
		<div class="2xl:w-1/2 2xl:h-full 2xl:flex 2xl:justify-around 2xl:items-center ">
			<a href=""><p class="text-white 2xl:font-extrabold 2xl:text-3xl 2xl:tracking-wider">Home</p></a>
			<a href=""><p class="text-white 2xl:font-extrabold 2xl:text-3xl 2xl:tracking-wider">About me</p></a>
			<a href=""><p class="text-white 2xl:font-extrabold 2xl:text-3xl 2xl:tracking-wider">Contact</p></a>
			<button class="2xl:w-2/12 2xl:h-2/4 2xl:bg-white rounded-lg"><a href=""><p class="text-black 2xl:font-extrabold 2xl:text-3xl 2xl:tracking-wider">Light</p></a></button>
		</div>
	</header>

	<main>
		
	</main>

  <canvas></canvas>
</body>


<script defer>
	const canvas = document.querySelector("canvas");
	const ctx = canvas?.getContext("2d");
  
	if (canvas) {
	  canvas.width = window.innerWidth;
	  canvas.height = window.innerHeight;
	}
  
	// Objeto para almacenar la posición del mouse
	const mouse = {
	  x: null,
	  y: null,
	};
  
	// Actualizar la posición del mouse
	window.addEventListener("mousemove", (event) => {
	  mouse.x = event.clientX;
	  mouse.y = event.clientY;
	});
  
	// Limpiar la posición del mouse cuando salga del canvas
	window.addEventListener("mouseout", () => {
	  mouse.x = null;
	  mouse.y = null;
	});
  
	class Bola {
	  constructor(x, y) {
		this.x = Math.random() * canvas.width;
		this.y = Math.random() * canvas.height;
		this.radio = 10;
		this.dirX = (Math.random() * 2) - 1;
		this.dirY = (Math.random() * 2) - 1;
		this.velocidad = 8;
		this.color = "rgb(43, 43, 43)"; // Color de la bola
	  }
  
	  dibujar() {
		if (ctx) {
		  ctx.fillStyle = this.color;
		  ctx.beginPath();
		  ctx.arc(this.x, this.y, this.radio, 0, Math.PI * 2);
		  ctx.fill();
		  ctx.closePath();
		}
	  }
  
	  mover() {
		this.x += this.dirX * this.velocidad;
		this.y += this.dirY * this.velocidad;
  
		if (this.x + this.radio > canvas.width || this.x - this.radio < 0) {
		  this.dirX *= -1;
		}
		if (this.y + this.radio > canvas.height || this.y - this.radio < 0) {
		  this.dirY *= -1;
		}
	  }
	}
  
	if (canvas) {
	  let bolas = [];
	  const cantidadBolas = 80;
  
	  for (let i = 0; i < cantidadBolas; i++) {
		bolas.push(new Bola(canvas.width / 2, canvas.height / 2));
	  }
  
	  function animar() {
		ctx.clearRect(0, 0, canvas.width, canvas.height);
  
		bolas.forEach((bola) => {
		  // Conectar bolas entre sí
		  bolas.forEach((bola2) => {
			const dx = bola2.x - bola.x;
			const dy = bola2.y - bola.y;
			const dist = Math.sqrt(dx ** 2 + dy ** 2);
  
			if (dist < 300) {
			  ctx.strokeStyle = bola.color;
			  ctx.lineWidth = 2;
			  ctx.beginPath();
			  ctx.lineTo(bola.x, bola.y);
			  ctx.lineTo(bola2.x, bola2.y);
			  ctx.stroke();
			  ctx.closePath();
			}
		  });
  
		  // Conectar bolas con el mouse
		  if (mouse.x !== null && mouse.y !== null) {
			const dx = mouse.x - bola.x;
			const dy = mouse.y - bola.y;
			const dist = Math.sqrt(dx ** 2 + dy ** 2);
  
			if (dist < 300) {
			  ctx.strokeStyle = bola.color; // Color de las líneas al mouse
			  ctx.beginPath();
			  ctx.lineTo(mouse.x, mouse.y);
			  ctx.lineTo(bola.x, bola.y);
			  ctx.stroke();
			  ctx.closePath();
			}
		  }
  
		  bola.dibujar();
		  bola.mover();
		});
  
		requestAnimationFrame(animar);
	  }
  
	  function ajustarCanvas() {
		const oldWidth = canvas.width;
		const oldHeight = canvas.height;
  
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
  
		// Ajustar posiciones proporcionales
		bolas.forEach((bola) => {
		  bola.x = (bola.x / oldWidth) * canvas.width;
		  bola.y = (bola.y / oldHeight) * canvas.height;
		});
	  }
  
	  window.addEventListener("resize", ajustarCanvas);
  
	  animar();
	}
</script>
  
</html>
